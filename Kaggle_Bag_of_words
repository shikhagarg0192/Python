import pandas as pd
from bs4 import BeautifulSoup
import re
from nltk.corpus import stopwords
from sklearn.feature_extraction.text import CountVectorizer
import numpy as np
from sklearn.ensemble import RandomForestClassifier

train = pd.read_csv("kaggle_nlp/labeledTrainData.tsv", header =0, delimiter = "\t", quoting = 3);

def review_to_words(raw) :
    review_text = BeautifulSoup(raw,"html.parser").get_text()
    letters_only = re.sub("[^a-zA-Z]"," ", review_text)
    words = letters_only.lower().split()
    stops = set(stopwords.words("english"))
    meaningful_words = [w for w in words if not w in stops]
    return(" ".join(meaningful_words))

num_reviews = train["review"].size
print num_reviews

clean_train_reviews = []

for i in xrange(0, num_reviews):
    if((i+1) % 1000 == 0):
        print "review %d of %d\n" % (i+1,num_reviews)
    clean_train_reviews.append(review_to_words(train["review"][i]))


vectorizer = CountVectorizer(analyzer = "word", \
                             tokenizer = None,\
                             preprocessor = None,\
                             stop_words = None,\
                             max_features = 5000)
train_data_features = vectorizer.fit_transform(clean_train_reviews)
train_data_features = train_data_features.toarray()

print train_data_features.shape

#vocab = vectorizer.get_feature_names()

#dist = np.sum(train_data_features, axis=0)

#for tag, count in zip(vocab, dist):
#   print count, tag



forest = RandomForestClassifier(n_estimators = 100)

forest = forest.fit(train_data_features, train["sentiment"])
'
test = pd.read_csv("kaggle_nlp/ltestData.tsv", header =0, delimiter = "\t", quoting = 3);
print test.shape

num_reviews = test["review"].size
clean_test_reviews = []

for i in xrange(0, num_reviews):
    if((i+1) % 1000 == 0):
        print "review %d of %d\n" % (i+1,num_reviews)
    clean_test_reviews.append(review_to_words(test["review"][i]))

test_data_features = vectorizer.transform(clean_test_reviews)
test_data_features = test_data_features.toarray()

result = forest.predict(test_data_features)
output = pd.DataFrame(data = {"id":test["id"], "sentiment":result})

output.to_csv("Bag_of_words.csv", index=False, quoting = 3)



